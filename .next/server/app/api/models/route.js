"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/models/route";
exports.ids = ["app/api/models/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fmodels%2Froute&page=%2Fapi%2Fmodels%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmodels%2Froute.ts&appDir=%2FUsers%2Fbanik%2FDesktop%2FProjects2025%2FBMarkApp-NextJS%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbanik%2FDesktop%2FProjects2025%2FBMarkApp-NextJS&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fmodels%2Froute&page=%2Fapi%2Fmodels%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmodels%2Froute.ts&appDir=%2FUsers%2Fbanik%2FDesktop%2FProjects2025%2FBMarkApp-NextJS%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbanik%2FDesktop%2FProjects2025%2FBMarkApp-NextJS&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_banik_Desktop_Projects2025_BMarkApp_NextJS_app_api_models_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/models/route.ts */ \"(rsc)/./app/api/models/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/models/route\",\n        pathname: \"/api/models\",\n        filename: \"route\",\n        bundlePath: \"app/api/models/route\"\n    },\n    resolvedPagePath: \"/Users/banik/Desktop/Projects2025/BMarkApp-NextJS/app/api/models/route.ts\",\n    nextConfigOutput,\n    userland: _Users_banik_Desktop_Projects2025_BMarkApp_NextJS_app_api_models_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/models/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZtb2RlbHMlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRm1vZGVscyUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRm1vZGVscyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmJhbmlrJTJGRGVza3RvcCUyRlByb2plY3RzMjAyNSUyRkJNYXJrQXBwLU5leHRKUyUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZiYW5payUyRkRlc2t0b3AlMkZQcm9qZWN0czIwMjUlMkZCTWFya0FwcC1OZXh0SlMmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ3lCO0FBQ3RHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGxtLWNvbnNlbnN1cy1iZW5jaG1hcmstbmV4dGpzLz9hYzJhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9Vc2Vycy9iYW5pay9EZXNrdG9wL1Byb2plY3RzMjAyNS9CTWFya0FwcC1OZXh0SlMvYXBwL2FwaS9tb2RlbHMvcm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL21vZGVscy9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL21vZGVsc1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvbW9kZWxzL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL1VzZXJzL2JhbmlrL0Rlc2t0b3AvUHJvamVjdHMyMDI1L0JNYXJrQXBwLU5leHRKUy9hcHAvYXBpL21vZGVscy9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvbW9kZWxzL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fmodels%2Froute&page=%2Fapi%2Fmodels%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmodels%2Froute.ts&appDir=%2FUsers%2Fbanik%2FDesktop%2FProjects2025%2FBMarkApp-NextJS%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbanik%2FDesktop%2FProjects2025%2FBMarkApp-NextJS&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/models/route.ts":
/*!*********************************!*\
  !*** ./app/api/models/route.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   PUT: () => (/* binding */ PUT)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/ZodError.js\");\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/supabase */ \"(rsc)/./lib/supabase.ts\");\n/* harmony import */ var _lib_openrouter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/openrouter */ \"(rsc)/./lib/openrouter.ts\");\n\n\n\n\n// Helper function to get OpenRouter API key from environment or headers\nfunction getOpenRouterApiKey(request) {\n    // First try environment variable (for production)\n    if (process.env.OPENROUTER_API_KEY) {\n        return process.env.OPENROUTER_API_KEY;\n    }\n    // Fall back to request headers (for development with settings page)\n    if (request?.headers.get(\"X-OpenRouter-API-Key\")) {\n        return request.headers.get(\"X-OpenRouter-API-Key\");\n    }\n    return null;\n}\n// Validation schemas\nconst UpdateModelSchema = zod__WEBPACK_IMPORTED_MODULE_3__.object({\n    id: zod__WEBPACK_IMPORTED_MODULE_3__.string().uuid(),\n    enabled: zod__WEBPACK_IMPORTED_MODULE_3__.boolean()\n});\nconst ModelSchema = zod__WEBPACK_IMPORTED_MODULE_3__.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_3__.string(),\n    provider: zod__WEBPACK_IMPORTED_MODULE_3__.string(),\n    model_id: zod__WEBPACK_IMPORTED_MODULE_3__.string(),\n    enabled: zod__WEBPACK_IMPORTED_MODULE_3__.boolean(),\n    context_length: zod__WEBPACK_IMPORTED_MODULE_3__.number()\n});\n// GET: Fetch all models\nasync function GET() {\n    try {\n        const models = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabaseClient.getModels();\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            models\n        }, {\n            status: 200\n        });\n    } catch (error) {\n        console.error(\"Error fetching models:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error instanceof Error ? error.message : \"Failed to fetch models\"\n        }, {\n            status: 500\n        });\n    }\n}\n// POST: Sync models from OpenRouter\nasync function POST(request) {\n    try {\n        const openRouterApiKey = getOpenRouterApiKey(request);\n        if (!openRouterApiKey) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"OpenRouter API key is not configured. Please set it in environment variables or via the settings page.\"\n            }, {\n                status: 500\n            });\n        }\n        // Initialize OpenRouter client\n        const openRouter = new _lib_openrouter__WEBPACK_IMPORTED_MODULE_2__[\"default\"](openRouterApiKey);\n        // Fetch models from OpenRouter\n        const openRouterResponse = await openRouter.getModels();\n        if (!openRouterResponse?.data) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Failed to fetch models from OpenRouter.\"\n            }, {\n                status: 500\n            });\n        }\n        // Filter models for benchmarking\n        const filteredModels = _lib_openrouter__WEBPACK_IMPORTED_MODULE_2__[\"default\"].filterModelsForBenchmark(openRouterResponse.data);\n        // Limit models per provider (up to 5 each)\n        const providerModels = {};\n        filteredModels.forEach((model)=>{\n            const [provider] = model.id.split(\"/\");\n            if (!providerModels[provider]) {\n                providerModels[provider] = [];\n            }\n            if (providerModels[provider].length < 5) {\n                providerModels[provider].push(model);\n            }\n        });\n        // Flatten the provider models\n        const selectedModels = Object.values(providerModels).flat();\n        // Process models for our database\n        const models = selectedModels.map((model)=>{\n            // Extract provider from model ID\n            const [provider, modelName] = model.id.split(\"/\");\n            const formattedProvider = provider.charAt(0).toUpperCase() + provider.slice(1);\n            // Format model name\n            const formattedName = modelName.split(\"-\").map((part)=>{\n                if (/^\\d+$/.test(part)) {\n                    return part;\n                }\n                return part.charAt(0).toUpperCase() + part.slice(1);\n            }).join(\" \");\n            return {\n                name: formattedName,\n                provider: formattedProvider,\n                model_id: model.id,\n                enabled: true,\n                context_length: model.context_length || 4096\n            };\n        });\n        // Add recommended models if they're not already included\n        const recommendedModels = [\n            {\n                id: \"openai/gpt-4o\",\n                name: \"GPT-4o\",\n                provider: \"OpenAI\",\n                context_length: 128000\n            },\n            {\n                id: \"anthropic/claude-3-5-sonnet\",\n                name: \"Claude 3.5 Sonnet\",\n                provider: \"Anthropic\",\n                context_length: 200000\n            },\n            {\n                id: \"google/gemini-pro-1.5\",\n                name: \"Gemini Pro 1.5\",\n                provider: \"Google\",\n                context_length: 2000000\n            },\n            {\n                id: \"meta-llama/llama-3.1-70b-instruct\",\n                name: \"Llama 3.1 70B\",\n                provider: \"Meta\",\n                context_length: 131072\n            },\n            {\n                id: \"mistralai/mistral-large\",\n                name: \"Mistral Large\",\n                provider: \"Mistral AI\",\n                context_length: 128000\n            },\n            {\n                id: \"cohere/command-r-plus\",\n                name: \"Command R+\",\n                provider: \"Cohere\",\n                context_length: 128000\n            }\n        ];\n        recommendedModels.forEach((recModel)=>{\n            if (!models.some((m)=>m.model_id === recModel.id)) {\n                models.push({\n                    name: recModel.name,\n                    provider: recModel.provider,\n                    model_id: recModel.id,\n                    enabled: true,\n                    context_length: recModel.context_length\n                });\n            }\n        });\n        // Validate models\n        const validatedModels = models.map((model)=>ModelSchema.parse(model));\n        // Get existing models to preserve enabled status\n        const existingModels = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabaseClient.getModels();\n        const existingModelMap = new Map(existingModels.map((m)=>[\n                m.model_id,\n                m.enabled\n            ]));\n        // Preserve enabled status for existing models\n        const modelsToUpsert = validatedModels.map((model)=>({\n                ...model,\n                enabled: existingModelMap.has(model.model_id) ? existingModelMap.get(model.model_id) : true\n            }));\n        // Upsert models\n        const savedModels = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabaseClient.upsertModels(modelsToUpsert);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            message: `Successfully synced ${savedModels.length} models.`,\n            models: savedModels\n        }, {\n            status: 200\n        });\n    } catch (error) {\n        console.error(\"Error syncing models:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error instanceof Error ? error.message : \"Failed to sync models\"\n        }, {\n            status: 500\n        });\n    }\n}\n// PUT: Update model enabled status\nasync function PUT(request) {\n    try {\n        const body = await request.json();\n        // Validate request body\n        const { id, enabled } = UpdateModelSchema.parse(body);\n        // Update model in database\n        const updatedModel = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabaseClient.updateModelEnabled(id, enabled);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            model: updatedModel\n        }, {\n            status: 200\n        });\n    } catch (error) {\n        console.error(\"Error updating model:\", error);\n        if (error instanceof zod__WEBPACK_IMPORTED_MODULE_4__.ZodError) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Invalid request data\",\n                details: error.errors\n            }, {\n                status: 400\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error instanceof Error ? error.message : \"Failed to update model\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/models/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/openrouter.ts":
/*!***************************!*\
  !*** ./lib/openrouter.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenRouterClient: () => (/* binding */ OpenRouterClient),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass OpenRouterClient {\n    constructor(apiKey){\n        this.apiKey = apiKey;\n        this.baseUrl = \"https://openrouter.ai/api/v1\";\n    }\n    async getModels() {\n        try {\n            const response = await fetch(`${this.baseUrl}/models`, {\n                headers: {\n                    \"Authorization\": `Bearer ${this.apiKey}`,\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            if (!response.ok) {\n                const errorText = await response.text();\n                throw new Error(`OpenRouter API error (${response.status}): ${errorText}`);\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(\"Error fetching models from OpenRouter:\", error);\n            throw new Error(`Failed to fetch models: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n        }\n    }\n    async getCompletion(modelId, prompt, options = {}) {\n        const startTime = Date.now();\n        const { maxTokens = 50, temperature = 0.7, systemPrompt = \"You are a helpful assistant. Please provide a clear, concise response to the user's question.\", timeout = 30000 } = options;\n        try {\n            const controller = new AbortController();\n            const timeoutId = setTimeout(()=>controller.abort(), timeout);\n            const response = await fetch(`${this.baseUrl}/chat/completions`, {\n                method: \"POST\",\n                headers: {\n                    \"Authorization\": `Bearer ${this.apiKey}`,\n                    \"Content-Type\": \"application/json\",\n                    \"HTTP-Referer\": process.env.NEXT_PUBLIC_APP_URL || \"http://localhost:3000\",\n                    \"X-Title\": \"LLM Consensus Benchmark\"\n                },\n                signal: controller.signal,\n                body: JSON.stringify({\n                    model: modelId,\n                    messages: [\n                        {\n                            role: \"system\",\n                            content: systemPrompt\n                        },\n                        {\n                            role: \"user\",\n                            content: prompt\n                        }\n                    ],\n                    max_tokens: maxTokens,\n                    temperature,\n                    stream: false\n                })\n            });\n            clearTimeout(timeoutId);\n            if (!response.ok) {\n                const errorText = await response.text().catch(()=>\"Unknown error\");\n                console.error(\"OpenRouter error response:\", response.status, errorText);\n                let errorMessage = errorText;\n                try {\n                    const errorData = JSON.parse(errorText);\n                    errorMessage = errorData.error?.message || errorData.error || errorText;\n                } catch (e) {\n                // errorText is already set\n                }\n                throw new Error(`OpenRouter API error (${response.status}): ${errorMessage}`);\n            }\n            const data = await response.json();\n            const endTime = Date.now();\n            if (!data.choices || data.choices.length === 0) {\n                throw new Error(\"No response choices returned from OpenRouter\");\n            }\n            const content = data.choices[0].message.content?.trim();\n            if (!content) {\n                throw new Error(\"Empty response from model\");\n            }\n            return {\n                text: content,\n                timeMs: endTime - startTime,\n                usage: data.usage\n            };\n        } catch (error) {\n            const endTime = Date.now();\n            if (error instanceof Error && error.name === \"AbortError\") {\n                throw new Error(`Request timeout after ${timeout}ms`);\n            }\n            console.error(`Error getting completion from ${modelId}:`, error);\n            throw new Error(`Failed to get completion: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n        }\n    }\n    async batchCompletion(modelIds, prompt, options = {}) {\n        const { concurrency = 5 } = options;\n        // Process requests in batches to avoid overwhelming the API\n        const results = [];\n        for(let i = 0; i < modelIds.length; i += concurrency){\n            const batch = modelIds.slice(i, i + concurrency);\n            const batchPromises = batch.map(async (modelId)=>{\n                try {\n                    const result = await this.getCompletion(modelId, prompt, options);\n                    return {\n                        modelId,\n                        result\n                    };\n                } catch (error) {\n                    console.error(`Error for model ${modelId}:`, error);\n                    return {\n                        modelId,\n                        error: error instanceof Error ? error.message : \"Unknown error\"\n                    };\n                }\n            });\n            const batchResults = await Promise.all(batchPromises);\n            results.push(...batchResults);\n            // Small delay between batches to be respectful to the API\n            if (i + concurrency < modelIds.length) {\n                await new Promise((resolve)=>setTimeout(resolve, 100));\n            }\n        }\n        return results;\n    }\n    // Utility method to filter and select models for benchmarking\n    static filterModelsForBenchmark(models) {\n        return models.filter((model)=>{\n            const modelId = model.id.toLowerCase();\n            // Exclude free, vision, and preview models\n            return !modelId.includes(\":free\") && !modelId.includes(\"vision\") && !modelId.includes(\"preview\") && !modelId.includes(\"beta\") && model.context_length >= 2000 // Ensure reasonable context length\n            ;\n        });\n    }\n    // Get recommended models for quick setup\n    static getRecommendedModelIds() {\n        return [\n            \"openai/gpt-4o\",\n            \"anthropic/claude-3-5-sonnet\",\n            \"google/gemini-pro-1.5\",\n            \"meta-llama/llama-3.1-70b-instruct\",\n            \"mistralai/mistral-large\",\n            \"cohere/command-r-plus\"\n        ];\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (OpenRouterClient);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/openrouter.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase.ts":
/*!*************************!*\
  !*** ./lib/supabase.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SupabaseClient: () => (/* binding */ SupabaseClient),\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   supabaseClient: () => (/* binding */ supabaseClient)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nconst supabaseUrl = \"https://rhwjusutkkwxypbqaoph.supabase.co\";\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJod2p1c3V0a2t3eHlwYnFhb3BoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc4ODEzNjAsImV4cCI6MjA2MzQ1NzM2MH0.4cYuDuaZyxfG7T1lkkiLttDehiYg9LdWKwEq1tPLkXM\";\nif (!supabaseUrl || !supabaseAnonKey) {\n    throw new Error(\"Missing Supabase environment variables\");\n}\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\n// Supabase client with enhanced error handling\nclass SupabaseClient {\n    async getModels() {\n        try {\n            const { data, error } = await this.client.from(\"models\").select(\"*\").order(\"provider\", {\n                ascending: true\n            }).order(\"name\", {\n                ascending: true\n            });\n            if (error) {\n                throw new Error(`Failed to fetch models: ${error.message}`);\n            }\n            return data || [];\n        } catch (error) {\n            console.error(\"Error fetching models:\", error);\n            throw error;\n        }\n    }\n    async updateModelEnabled(id, enabled) {\n        try {\n            const { data, error } = await this.client.from(\"models\").update({\n                enabled,\n                updated_at: new Date().toISOString()\n            }).eq(\"id\", id).select().single();\n            if (error) {\n                throw new Error(`Failed to update model: ${error.message}`);\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Error updating model:\", error);\n            throw error;\n        }\n    }\n    async upsertModels(models) {\n        try {\n            const { data, error } = await this.client.from(\"models\").upsert(models, {\n                onConflict: \"model_id\"\n            }).select();\n            if (error) {\n                throw new Error(`Failed to upsert models: ${error.message}`);\n            }\n            return data || [];\n        } catch (error) {\n            console.error(\"Error upserting models:\", error);\n            throw error;\n        }\n    }\n    async savePrompt(text) {\n        try {\n            const { data, error } = await this.client.from(\"prompts\").insert({\n                text\n            }).select().single();\n            if (error) {\n                throw new Error(`Failed to save prompt: ${error.message}`);\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Error saving prompt:\", error);\n            throw error;\n        }\n    }\n    async saveResponses(responses) {\n        try {\n            const { data, error } = await this.client.from(\"responses\").insert(responses).select(`\n          *,\n          model:models(*)\n        `);\n            if (error) {\n                throw new Error(`Failed to save responses: ${error.message}`);\n            }\n            return data || [];\n        } catch (error) {\n            console.error(\"Error saving responses:\", error);\n            throw error;\n        }\n    }\n    async saveConsensusGroups(groups) {\n        try {\n            const { data, error } = await this.client.from(\"consensus_groups\").insert(groups).select();\n            if (error) {\n                throw new Error(`Failed to save consensus groups: ${error.message}`);\n            }\n            return data || [];\n        } catch (error) {\n            console.error(\"Error saving consensus groups:\", error);\n            throw error;\n        }\n    }\n    async getPromptHistory(limit = 50) {\n        try {\n            const { data, error } = await this.client.from(\"prompts\").select(\"*\").order(\"created_at\", {\n                ascending: false\n            }).limit(limit);\n            if (error) {\n                throw new Error(`Failed to fetch prompt history: ${error.message}`);\n            }\n            return data || [];\n        } catch (error) {\n            console.error(\"Error fetching prompt history:\", error);\n            throw error;\n        }\n    }\n    async getPromptWithResults(promptId) {\n        try {\n            const [promptResult, responsesResult, consensusResult] = await Promise.all([\n                this.client.from(\"prompts\").select(\"*\").eq(\"id\", promptId).single(),\n                this.client.from(\"responses\").select(`\n          *,\n          model:models(*)\n        `).eq(\"prompt_id\", promptId),\n                this.client.from(\"consensus_groups\").select(\"*\").eq(\"prompt_id\", promptId)\n            ]);\n            if (promptResult.error) {\n                throw new Error(`Failed to fetch prompt: ${promptResult.error.message}`);\n            }\n            return {\n                prompt: promptResult.data,\n                responses: responsesResult.data || [],\n                consensusGroups: consensusResult.data || []\n            };\n        } catch (error) {\n            console.error(\"Error fetching prompt with results:\", error);\n            throw error;\n        }\n    }\n    constructor(){\n        this.client = supabase;\n    }\n}\nconst supabaseClient = new SupabaseClient();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/zod","vendor-chunks/whatwg-url","vendor-chunks/tr46"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fmodels%2Froute&page=%2Fapi%2Fmodels%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmodels%2Froute.ts&appDir=%2FUsers%2Fbanik%2FDesktop%2FProjects2025%2FBMarkApp-NextJS%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbanik%2FDesktop%2FProjects2025%2FBMarkApp-NextJS&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();