"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/prompt/route";
exports.ids = ["app/api/prompt/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fprompt%2Froute&page=%2Fapi%2Fprompt%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprompt%2Froute.ts&appDir=%2FUsers%2Fbanik%2FDesktop%2FProjects2025%2FBMarkApp-NextJS%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbanik%2FDesktop%2FProjects2025%2FBMarkApp-NextJS&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fprompt%2Froute&page=%2Fapi%2Fprompt%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprompt%2Froute.ts&appDir=%2FUsers%2Fbanik%2FDesktop%2FProjects2025%2FBMarkApp-NextJS%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbanik%2FDesktop%2FProjects2025%2FBMarkApp-NextJS&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_banik_Desktop_Projects2025_BMarkApp_NextJS_app_api_prompt_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/prompt/route.ts */ \"(rsc)/./app/api/prompt/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/prompt/route\",\n        pathname: \"/api/prompt\",\n        filename: \"route\",\n        bundlePath: \"app/api/prompt/route\"\n    },\n    resolvedPagePath: \"/Users/banik/Desktop/Projects2025/BMarkApp-NextJS/app/api/prompt/route.ts\",\n    nextConfigOutput,\n    userland: _Users_banik_Desktop_Projects2025_BMarkApp_NextJS_app_api_prompt_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/prompt/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZwcm9tcHQlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRnByb21wdCUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRnByb21wdCUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmJhbmlrJTJGRGVza3RvcCUyRlByb2plY3RzMjAyNSUyRkJNYXJrQXBwLU5leHRKUyUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZiYW5payUyRkRlc2t0b3AlMkZQcm9qZWN0czIwMjUlMkZCTWFya0FwcC1OZXh0SlMmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ3lCO0FBQ3RHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGxtLWNvbnNlbnN1cy1iZW5jaG1hcmstbmV4dGpzLz9iNzhlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9Vc2Vycy9iYW5pay9EZXNrdG9wL1Byb2plY3RzMjAyNS9CTWFya0FwcC1OZXh0SlMvYXBwL2FwaS9wcm9tcHQvcm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3Byb21wdC9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3Byb21wdFwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvcHJvbXB0L3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL1VzZXJzL2JhbmlrL0Rlc2t0b3AvUHJvamVjdHMyMDI1L0JNYXJrQXBwLU5leHRKUy9hcHAvYXBpL3Byb21wdC9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvcHJvbXB0L3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fprompt%2Froute&page=%2Fapi%2Fprompt%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprompt%2Froute.ts&appDir=%2FUsers%2Fbanik%2FDesktop%2FProjects2025%2FBMarkApp-NextJS%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbanik%2FDesktop%2FProjects2025%2FBMarkApp-NextJS&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/prompt/route.ts":
/*!*********************************!*\
  !*** ./app/api/prompt/route.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/ZodError.js\");\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/supabase */ \"(rsc)/./lib/supabase.ts\");\n/* harmony import */ var _lib_openrouter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/openrouter */ \"(rsc)/./lib/openrouter.ts\");\n/* harmony import */ var _lib_consensus_analyzer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/consensus-analyzer */ \"(rsc)/./lib/consensus-analyzer.ts\");\n\n\n\n\n\n// Helper function to get OpenRouter API key from environment or headers\nfunction getOpenRouterApiKey(request) {\n    // First try environment variable (for production)\n    if (process.env.OPENROUTER_API_KEY) {\n        return process.env.OPENROUTER_API_KEY;\n    }\n    // Fall back to request headers (for development with settings page)\n    if (request?.headers.get(\"X-OpenRouter-API-Key\")) {\n        return request.headers.get(\"X-OpenRouter-API-Key\");\n    }\n    return null;\n}\n// Validation schemas\nconst PromptRequestSchema = zod__WEBPACK_IMPORTED_MODULE_4__.object({\n    text: zod__WEBPACK_IMPORTED_MODULE_4__.string().min(1, \"Prompt text is required\").max(1000, \"Prompt too long\"),\n    modelIds: zod__WEBPACK_IMPORTED_MODULE_4__.array(zod__WEBPACK_IMPORTED_MODULE_4__.string().uuid()).min(1, \"At least one model must be selected\")\n});\n// POST: Process prompt with selected models\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        // Validate request body\n        const { text, modelIds } = PromptRequestSchema.parse(body);\n        // Get OpenRouter API key\n        const openRouterApiKey = getOpenRouterApiKey(request);\n        if (!openRouterApiKey) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"OpenRouter API key is not configured. Please set it in environment variables or via the settings page.\"\n            }, {\n                status: 500\n            });\n        }\n        // Get selected models from database\n        const allModels = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabaseClient.getModels();\n        const selectedModels = allModels.filter((model)=>modelIds.includes(model.id));\n        if (selectedModels.length === 0) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"No valid models selected.\"\n            }, {\n                status: 400\n            });\n        }\n        // Save prompt to database\n        const savedPrompt = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabaseClient.savePrompt(text);\n        // Initialize OpenRouter client\n        const openRouter = new _lib_openrouter__WEBPACK_IMPORTED_MODULE_2__[\"default\"](openRouterApiKey);\n        // Get model IDs for OpenRouter\n        const modelOpenRouterIds = selectedModels.map((model)=>model.model_id);\n        // Send requests to all models in batches\n        const batchResults = await openRouter.batchCompletion(modelOpenRouterIds, text, {\n            maxTokens: 10,\n            temperature: 0.7,\n            systemPrompt: \"You are a helpful assistant. Respond with a single word only.\",\n            timeout: 30000,\n            concurrency: 5\n        });\n        // Process results and prepare responses\n        const responses = [];\n        const processedResults = batchResults.map((batchResult)=>{\n            const model = selectedModels.find((m)=>m.model_id === batchResult.modelId);\n            if (batchResult.error || !batchResult.result || !model) {\n                return {\n                    model: model || {\n                        id: \"unknown\",\n                        name: \"Unknown\",\n                        provider: \"Unknown\"\n                    },\n                    response_text: batchResult.error || \"Error\",\n                    response_time_ms: 0,\n                    error: batchResult.error || \"Unknown error\"\n                };\n            }\n            // Add to database responses\n            responses.push({\n                prompt_id: savedPrompt.id,\n                model_id: model.id,\n                response_text: batchResult.result.text,\n                response_time_ms: batchResult.result.timeMs\n            });\n            return {\n                model: {\n                    id: model.id,\n                    name: model.name,\n                    provider: model.provider\n                },\n                response_text: batchResult.result.text,\n                response_time_ms: batchResult.result.timeMs,\n                usage: batchResult.result.usage\n            };\n        });\n        // Save responses to database if any were successful\n        let savedResponses = [];\n        if (responses.length > 0) {\n            savedResponses = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabaseClient.saveResponses(responses);\n        }\n        // Analyze consensus\n        const consensusAnalysis = _lib_consensus_analyzer__WEBPACK_IMPORTED_MODULE_3__.ConsensusAnalyzer.analyzeConsensus(savedResponses.map((response)=>({\n                id: response.id,\n                model_id: response.model_id,\n                response_text: response.response_text,\n                response_time_ms: response.response_time_ms,\n                model: response.model\n            })));\n        // Save consensus groups to database\n        let savedConsensusGroups = [];\n        if (consensusAnalysis.groups.length > 0) {\n            const consensusGroupsToSave = consensusAnalysis.groups.map((group)=>({\n                    prompt_id: savedPrompt.id,\n                    group_name: group.groupName,\n                    count: group.count,\n                    percentage: group.percentage,\n                    color: group.color\n                }));\n            try {\n                savedConsensusGroups = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabaseClient.saveConsensusGroups(consensusGroupsToSave);\n            } catch (error) {\n                console.error(\"Failed to save consensus groups, continuing without saving:\", error);\n            // Continue without saving consensus groups to database\n            }\n        }\n        // Generate insights\n        const insights = _lib_consensus_analyzer__WEBPACK_IMPORTED_MODULE_3__.ConsensusAnalyzer.generateInsights(consensusAnalysis);\n        const summaryStats = _lib_consensus_analyzer__WEBPACK_IMPORTED_MODULE_3__.ConsensusAnalyzer.getSummaryStats(consensusAnalysis);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            prompt: savedPrompt,\n            responses: processedResults,\n            consensus_groups: consensusAnalysis.groups,\n            insights,\n            summary: summaryStats,\n            total_models: selectedModels.length,\n            successful_responses: responses.length,\n            failed_responses: selectedModels.length - responses.length\n        }, {\n            status: 200\n        });\n    } catch (error) {\n        console.error(\"Error processing prompt:\", error);\n        console.error(\"Error stack:\", error instanceof Error ? error.stack : \"No stack trace\");\n        if (error instanceof zod__WEBPACK_IMPORTED_MODULE_5__.ZodError) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Invalid request data\",\n                details: error.errors\n            }, {\n                status: 400\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error instanceof Error ? error.message : \"Failed to process prompt\"\n        }, {\n            status: 500\n        });\n    }\n}\n// GET: Get prompt history\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const limit = parseInt(searchParams.get(\"limit\") || \"50\");\n        const promptId = searchParams.get(\"id\");\n        if (promptId) {\n            // Get specific prompt with results\n            const promptWithResults = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabaseClient.getPromptWithResults(promptId);\n            if (!promptWithResults) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Prompt not found\"\n                }, {\n                    status: 404\n                });\n            }\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(promptWithResults, {\n                status: 200\n            });\n        } else {\n            // Get prompt history\n            const prompts = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabaseClient.getPromptHistory(limit);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                prompts\n            }, {\n                status: 200\n            });\n        }\n    } catch (error) {\n        console.error(\"Error fetching prompt data:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error instanceof Error ? error.message : \"Failed to fetch prompt data\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/prompt/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/consensus-analyzer.ts":
/*!***********************************!*\
  !*** ./lib/consensus-analyzer.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConsensusAnalyzer: () => (/* binding */ ConsensusAnalyzer)\n/* harmony export */ });\nclass ConsensusAnalyzer {\n    static{\n        this.SIMILARITY_THRESHOLD = 0.8;\n    }\n    static{\n        this.COLORS = [\n            \"#3B82F6\",\n            \"#EF4444\",\n            \"#10B981\",\n            \"#F59E0B\",\n            \"#8B5CF6\",\n            \"#F97316\",\n            \"#06B6D4\",\n            \"#84CC16\",\n            \"#EC4899\",\n            \"#6B7280\"\n        ];\n    }\n    /**\n   * Analyze responses to find consensus groups\n   */ static analyzeConsensus(responses) {\n        if (responses.length === 0) {\n            return {\n                groups: [],\n                totalResponses: 0,\n                consensusLevel: 0,\n                diversity: 0,\n                topResponse: \"\"\n            };\n        }\n        // Group similar responses\n        const groups = this.groupSimilarResponses(responses);\n        // Sort groups by count (descending)\n        groups.sort((a, b)=>b.count - a.count);\n        // Assign colors\n        groups.forEach((group, index)=>{\n            group.color = this.COLORS[index % this.COLORS.length];\n        });\n        // Calculate metrics\n        const totalResponses = responses.length;\n        const consensusLevel = groups.length > 0 ? groups[0].count / totalResponses * 100 : 0;\n        const diversity = groups.length / totalResponses;\n        const topResponse = groups.length > 0 ? groups[0].groupName : \"\";\n        return {\n            groups,\n            totalResponses,\n            consensusLevel,\n            diversity,\n            topResponse\n        };\n    }\n    /**\n   * Group responses by similarity\n   */ static groupSimilarResponses(responses) {\n        const groups = [];\n        for (const response of responses){\n            const normalizedText = this.normalizeText(response.response_text);\n            // Find existing group or create new one\n            let group = groups.find((g)=>this.calculateSimilarity(g.groupName, normalizedText) >= this.SIMILARITY_THRESHOLD);\n            if (!group) {\n                group = {\n                    groupName: normalizedText,\n                    count: 0,\n                    percentage: 0,\n                    color: \"\",\n                    models: [],\n                    responses: []\n                };\n                groups.push(group);\n            }\n            // Add response to group\n            group.count++;\n            group.responses.push(response);\n            if (response.model) {\n                group.models.push(response.model.name);\n            }\n        }\n        // Calculate percentages\n        const total = responses.length;\n        groups.forEach((group)=>{\n            group.percentage = group.count / total * 100;\n        });\n        return groups;\n    }\n    /**\n   * Normalize text for comparison\n   */ static normalizeText(text) {\n        return text.toLowerCase().trim().replace(/[^\\w\\s]/g, \"\") // Remove punctuation\n        .replace(/\\s+/g, \" \") // Normalize whitespace\n        ;\n    }\n    /**\n   * Calculate similarity between two texts using Levenshtein distance\n   */ static calculateSimilarity(text1, text2) {\n        const normalized1 = this.normalizeText(text1);\n        const normalized2 = this.normalizeText(text2);\n        if (normalized1 === normalized2) return 1.0;\n        const distance = this.levenshteinDistance(normalized1, normalized2);\n        const maxLength = Math.max(normalized1.length, normalized2.length);\n        return maxLength === 0 ? 1.0 : 1 - distance / maxLength;\n    }\n    /**\n   * Calculate Levenshtein distance between two strings\n   */ static levenshteinDistance(str1, str2) {\n        const matrix = Array(str2.length + 1).fill(null).map(()=>Array(str1.length + 1).fill(null));\n        for(let i = 0; i <= str1.length; i++)matrix[0][i] = i;\n        for(let j = 0; j <= str2.length; j++)matrix[j][0] = j;\n        for(let j = 1; j <= str2.length; j++){\n            for(let i = 1; i <= str1.length; i++){\n                const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;\n                matrix[j][i] = Math.min(matrix[j][i - 1] + 1, matrix[j - 1][i] + 1, matrix[j - 1][i - 1] + indicator // substitution\n                );\n            }\n        }\n        return matrix[str2.length][str1.length];\n    }\n    /**\n   * Generate insights about the consensus\n   */ static generateInsights(analysis) {\n        const insights = [];\n        const { groups, totalResponses, consensusLevel, diversity } = analysis;\n        if (totalResponses === 0) {\n            return [\n                \"No responses to analyze.\"\n            ];\n        }\n        // Consensus level insights\n        if (consensusLevel >= 80) {\n            insights.push(`Strong consensus: ${consensusLevel.toFixed(1)}% of models agreed on \"${analysis.topResponse}\".`);\n        } else if (consensusLevel >= 60) {\n            insights.push(`Moderate consensus: ${consensusLevel.toFixed(1)}% of models agreed on \"${analysis.topResponse}\".`);\n        } else if (consensusLevel >= 40) {\n            insights.push(`Weak consensus: Only ${consensusLevel.toFixed(1)}% of models agreed on \"${analysis.topResponse}\".`);\n        } else {\n            insights.push(`No clear consensus: Responses were highly diverse with the top response only getting ${consensusLevel.toFixed(1)}% agreement.`);\n        }\n        // Diversity insights\n        if (diversity >= 0.8) {\n            insights.push(\"Very high diversity: Most models gave different responses.\");\n        } else if (diversity >= 0.6) {\n            insights.push(\"High diversity: Many different responses were given.\");\n        } else if (diversity >= 0.4) {\n            insights.push(\"Moderate diversity: Some variation in responses.\");\n        } else {\n            insights.push(\"Low diversity: Models tended to give similar responses.\");\n        }\n        // Group insights\n        if (groups.length >= 2) {\n            const secondGroup = groups[1];\n            const gap = groups[0].percentage - secondGroup.percentage;\n            if (gap < 10) {\n                insights.push(`Close competition: \"${groups[0].groupName}\" (${groups[0].percentage.toFixed(1)}%) barely edged out \"${secondGroup.groupName}\" (${secondGroup.percentage.toFixed(1)}%).`);\n            }\n        }\n        // Provider insights\n        if (groups.length > 0) {\n            const topGroup = groups[0];\n            const providers = topGroup.responses.map((r)=>r.model?.provider).filter(Boolean);\n            const uniqueProviders = [\n                ...new Set(providers)\n            ];\n            if (uniqueProviders.length === 1) {\n                insights.push(`Provider bias: All models agreeing on \"${topGroup.groupName}\" were from ${uniqueProviders[0]}.`);\n            } else if (uniqueProviders.length >= 3) {\n                insights.push(`Cross-provider agreement: Models from ${uniqueProviders.length} different providers agreed on \"${topGroup.groupName}\".`);\n            }\n        }\n        return insights;\n    }\n    /**\n   * Export consensus data to CSV format\n   */ static exportToCsv(analysis, promptText) {\n        const headers = [\n            \"Response\",\n            \"Count\",\n            \"Percentage\",\n            \"Models\"\n        ];\n        const rows = analysis.groups.map((group)=>[\n                `\"${group.groupName.replace(/\"/g, '\"\"')}\"`,\n                group.count.toString(),\n                group.percentage.toFixed(1),\n                `\"${group.models.join(\", \").replace(/\"/g, '\"\"')}\"`\n            ]);\n        const csvContent = [\n            `# LLM Consensus Analysis`,\n            `# Prompt: \"${promptText.replace(/\"/g, '\"\"')}\"`,\n            `# Generated: ${new Date().toISOString()}`,\n            `# Total Responses: ${analysis.totalResponses}`,\n            `# Consensus Level: ${analysis.consensusLevel.toFixed(1)}%`,\n            ``,\n            headers.join(\",\"),\n            ...rows.map((row)=>row.join(\",\"))\n        ].join(\"\\n\");\n        return csvContent;\n    }\n    /**\n   * Generate summary statistics\n   */ static getSummaryStats(analysis) {\n        return {\n            totalModels: analysis.totalResponses,\n            uniqueResponses: analysis.groups.length,\n            consensusLevel: analysis.consensusLevel,\n            topResponse: analysis.topResponse,\n            responseDistribution: analysis.groups.map((group)=>({\n                    response: group.groupName,\n                    count: group.count,\n                    percentage: group.percentage\n                }))\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/consensus-analyzer.ts\n");

/***/ }),

/***/ "(rsc)/./lib/openrouter.ts":
/*!***************************!*\
  !*** ./lib/openrouter.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenRouterClient: () => (/* binding */ OpenRouterClient),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass OpenRouterClient {\n    constructor(apiKey){\n        this.apiKey = apiKey;\n        this.baseUrl = \"https://openrouter.ai/api/v1\";\n    }\n    async getModels() {\n        try {\n            const response = await fetch(`${this.baseUrl}/models`, {\n                headers: {\n                    \"Authorization\": `Bearer ${this.apiKey}`,\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            if (!response.ok) {\n                const errorText = await response.text();\n                throw new Error(`OpenRouter API error (${response.status}): ${errorText}`);\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(\"Error fetching models from OpenRouter:\", error);\n            throw new Error(`Failed to fetch models: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n        }\n    }\n    async getCompletion(modelId, prompt, options = {}) {\n        const startTime = Date.now();\n        const { maxTokens = 50, temperature = 0.7, systemPrompt = \"You are a helpful assistant. Please provide a clear, concise response to the user's question.\", timeout = 30000 } = options;\n        try {\n            const controller = new AbortController();\n            const timeoutId = setTimeout(()=>controller.abort(), timeout);\n            const response = await fetch(`${this.baseUrl}/chat/completions`, {\n                method: \"POST\",\n                headers: {\n                    \"Authorization\": `Bearer ${this.apiKey}`,\n                    \"Content-Type\": \"application/json\",\n                    \"HTTP-Referer\": process.env.NEXT_PUBLIC_APP_URL || \"http://localhost:3000\",\n                    \"X-Title\": \"LLM Consensus Benchmark\"\n                },\n                signal: controller.signal,\n                body: JSON.stringify({\n                    model: modelId,\n                    messages: [\n                        {\n                            role: \"system\",\n                            content: systemPrompt\n                        },\n                        {\n                            role: \"user\",\n                            content: prompt\n                        }\n                    ],\n                    max_tokens: maxTokens,\n                    temperature,\n                    stream: false\n                })\n            });\n            clearTimeout(timeoutId);\n            if (!response.ok) {\n                const errorText = await response.text().catch(()=>\"Unknown error\");\n                console.error(\"OpenRouter error response:\", response.status, errorText);\n                let errorMessage = errorText;\n                try {\n                    const errorData = JSON.parse(errorText);\n                    errorMessage = errorData.error?.message || errorData.error || errorText;\n                } catch (e) {\n                // errorText is already set\n                }\n                throw new Error(`OpenRouter API error (${response.status}): ${errorMessage}`);\n            }\n            const data = await response.json();\n            const endTime = Date.now();\n            if (!data.choices || data.choices.length === 0) {\n                throw new Error(\"No response choices returned from OpenRouter\");\n            }\n            const content = data.choices[0].message.content?.trim();\n            if (!content) {\n                throw new Error(\"Empty response from model\");\n            }\n            return {\n                text: content,\n                timeMs: endTime - startTime,\n                usage: data.usage\n            };\n        } catch (error) {\n            const endTime = Date.now();\n            if (error instanceof Error && error.name === \"AbortError\") {\n                throw new Error(`Request timeout after ${timeout}ms`);\n            }\n            console.error(`Error getting completion from ${modelId}:`, error);\n            throw new Error(`Failed to get completion: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n        }\n    }\n    async batchCompletion(modelIds, prompt, options = {}) {\n        const { concurrency = 5 } = options;\n        // Process requests in batches to avoid overwhelming the API\n        const results = [];\n        for(let i = 0; i < modelIds.length; i += concurrency){\n            const batch = modelIds.slice(i, i + concurrency);\n            const batchPromises = batch.map(async (modelId)=>{\n                try {\n                    const result = await this.getCompletion(modelId, prompt, options);\n                    return {\n                        modelId,\n                        result\n                    };\n                } catch (error) {\n                    console.error(`Error for model ${modelId}:`, error);\n                    return {\n                        modelId,\n                        error: error instanceof Error ? error.message : \"Unknown error\"\n                    };\n                }\n            });\n            const batchResults = await Promise.all(batchPromises);\n            results.push(...batchResults);\n            // Small delay between batches to be respectful to the API\n            if (i + concurrency < modelIds.length) {\n                await new Promise((resolve)=>setTimeout(resolve, 100));\n            }\n        }\n        return results;\n    }\n    // Utility method to filter and select models for benchmarking\n    static filterModelsForBenchmark(models) {\n        return models.filter((model)=>{\n            const modelId = model.id.toLowerCase();\n            // Exclude free, vision, and preview models\n            return !modelId.includes(\":free\") && !modelId.includes(\"vision\") && !modelId.includes(\"preview\") && !modelId.includes(\"beta\") && model.context_length >= 2000 // Ensure reasonable context length\n            ;\n        });\n    }\n    // Get recommended models for quick setup\n    static getRecommendedModelIds() {\n        return [\n            \"openai/gpt-4o\",\n            \"anthropic/claude-3-5-sonnet\",\n            \"google/gemini-pro-1.5\",\n            \"meta-llama/llama-3.1-70b-instruct\",\n            \"mistralai/mistral-large\",\n            \"cohere/command-r-plus\"\n        ];\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (OpenRouterClient);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/openrouter.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase.ts":
/*!*************************!*\
  !*** ./lib/supabase.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SupabaseClient: () => (/* binding */ SupabaseClient),\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   supabaseClient: () => (/* binding */ supabaseClient)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nconst supabaseUrl = \"https://rhwjusutkkwxypbqaoph.supabase.co\";\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJod2p1c3V0a2t3eHlwYnFhb3BoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc4ODEzNjAsImV4cCI6MjA2MzQ1NzM2MH0.4cYuDuaZyxfG7T1lkkiLttDehiYg9LdWKwEq1tPLkXM\";\nif (!supabaseUrl || !supabaseAnonKey) {\n    throw new Error(\"Missing Supabase environment variables\");\n}\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\n// Supabase client with enhanced error handling\nclass SupabaseClient {\n    async getModels() {\n        try {\n            const { data, error } = await this.client.from(\"models\").select(\"*\").order(\"provider\", {\n                ascending: true\n            }).order(\"name\", {\n                ascending: true\n            });\n            if (error) {\n                throw new Error(`Failed to fetch models: ${error.message}`);\n            }\n            return data || [];\n        } catch (error) {\n            console.error(\"Error fetching models:\", error);\n            throw error;\n        }\n    }\n    async updateModelEnabled(id, enabled) {\n        try {\n            const { data, error } = await this.client.from(\"models\").update({\n                enabled,\n                updated_at: new Date().toISOString()\n            }).eq(\"id\", id).select().single();\n            if (error) {\n                throw new Error(`Failed to update model: ${error.message}`);\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Error updating model:\", error);\n            throw error;\n        }\n    }\n    async upsertModels(models) {\n        try {\n            const { data, error } = await this.client.from(\"models\").upsert(models, {\n                onConflict: \"model_id\"\n            }).select();\n            if (error) {\n                throw new Error(`Failed to upsert models: ${error.message}`);\n            }\n            return data || [];\n        } catch (error) {\n            console.error(\"Error upserting models:\", error);\n            throw error;\n        }\n    }\n    async savePrompt(text) {\n        try {\n            const { data, error } = await this.client.from(\"prompts\").insert({\n                text\n            }).select().single();\n            if (error) {\n                throw new Error(`Failed to save prompt: ${error.message}`);\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Error saving prompt:\", error);\n            throw error;\n        }\n    }\n    async saveResponses(responses) {\n        try {\n            const { data, error } = await this.client.from(\"responses\").insert(responses).select(`\n          *,\n          model:models(*)\n        `);\n            if (error) {\n                throw new Error(`Failed to save responses: ${error.message}`);\n            }\n            return data || [];\n        } catch (error) {\n            console.error(\"Error saving responses:\", error);\n            throw error;\n        }\n    }\n    async saveConsensusGroups(groups) {\n        try {\n            const { data, error } = await this.client.from(\"consensus_groups\").insert(groups).select();\n            if (error) {\n                throw new Error(`Failed to save consensus groups: ${error.message}`);\n            }\n            return data || [];\n        } catch (error) {\n            console.error(\"Error saving consensus groups:\", error);\n            throw error;\n        }\n    }\n    async getPromptHistory(limit = 50) {\n        try {\n            const { data, error } = await this.client.from(\"prompts\").select(\"*\").order(\"created_at\", {\n                ascending: false\n            }).limit(limit);\n            if (error) {\n                throw new Error(`Failed to fetch prompt history: ${error.message}`);\n            }\n            return data || [];\n        } catch (error) {\n            console.error(\"Error fetching prompt history:\", error);\n            throw error;\n        }\n    }\n    async getPromptWithResults(promptId) {\n        try {\n            const [promptResult, responsesResult, consensusResult] = await Promise.all([\n                this.client.from(\"prompts\").select(\"*\").eq(\"id\", promptId).single(),\n                this.client.from(\"responses\").select(`\n          *,\n          model:models(*)\n        `).eq(\"prompt_id\", promptId),\n                this.client.from(\"consensus_groups\").select(\"*\").eq(\"prompt_id\", promptId)\n            ]);\n            if (promptResult.error) {\n                throw new Error(`Failed to fetch prompt: ${promptResult.error.message}`);\n            }\n            return {\n                prompt: promptResult.data,\n                responses: responsesResult.data || [],\n                consensusGroups: consensusResult.data || []\n            };\n        } catch (error) {\n            console.error(\"Error fetching prompt with results:\", error);\n            throw error;\n        }\n    }\n    constructor(){\n        this.client = supabase;\n    }\n}\nconst supabaseClient = new SupabaseClient();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/zod","vendor-chunks/whatwg-url","vendor-chunks/tr46"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fprompt%2Froute&page=%2Fapi%2Fprompt%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprompt%2Froute.ts&appDir=%2FUsers%2Fbanik%2FDesktop%2FProjects2025%2FBMarkApp-NextJS%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbanik%2FDesktop%2FProjects2025%2FBMarkApp-NextJS&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();